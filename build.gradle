plugins {
    id 'java'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

group = 'page.nafuchoco.mofu'
version = '0.4.0-Beta.1'

repositories {
    mavenCentral()
    maven {
        name = 'spigotmc-repo'
        url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'
    }
    maven {
        name = 'sonatype'
        url = 'https://oss.sonatype.org/content/groups/public/'
    }
    maven {
        url = 'https://maven.aura-dev.team/repository/auradev-releases/'
    }
}

dependencies {
    compileOnly 'org.jetbrains:annotations:23.0.0'
    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'

    compileOnly 'org.spigotmc:spigot-api:1.17-R0.1-SNAPSHOT'

    implementation 'com.google.code.gson:gson:2.9.0'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.13.3'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.3'

    implementation 'team.aura_dev.lib.slf4j-plugin.spigot:slf4j-plugin-spigot:1.2.0.39:1.7.25'
    implementation 'com.zaxxer:HikariCP:5.0.1'
    implementation 'mysql:mysql-connector-java:8.0.30'
    implementation 'org.mariadb.jdbc:mariadb-java-client:3.0.6'
}

shadowJar {
    archiveFileName.set(rootProject.name + '.' + archiveExtension.get())
}

def targetJavaVersion = 16
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

task sourcesJar(type: Jar, dependsOn: 'classes') {
    from sourceSets.main.allSource
    archiveClassifier.set('sources')
}
task javadocJar(type: Jar, dependsOn: 'javadoc') {
    from javadoc.destinationDir
    archiveClassifier.set('javadoc')
}
javadoc {
    options.charSet = 'UTF-8'
    options.encoding = 'UTF-8'
}
task beforeDeploy {
    dependsOn('sourcesJar', 'javadocJar', 'shadowJar')
}
publishing {
    publications {
        mavenAar(MavenPublication) {
            from components.java
            afterEvaluate {
                artifact javadocJar
                artifact sourcesJar
            }
        }
    }
}
